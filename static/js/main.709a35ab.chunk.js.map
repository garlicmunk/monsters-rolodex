{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchField","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGaA,G,kBAAO,SAACC,GAErB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACJ,4BAAIN,EAAMI,QAAQG,aCIHC,EATE,SAAAR,GAEb,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCQ5CM,G,MAbM,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aAEhC,OACA,8BACG,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,QC4BFG,E,kDAlCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,gEAUO,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOtH,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACA,sBAAK9B,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CAAaW,YAAY,kBAAkBC,aAAee,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BRI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.709a35ab.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = (props)=> {\n\nreturn(\n<div className=\"card-container\">\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n    <h2> {props.monster.name} </h2>\n<p>{props.monster.email}</p>\n</div>)\n}\n\n","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from '../card/card.component'; \n\nconst CardList = props => {\n\n    return(\n    <div className='card-list'>\n        {props.monsters.map(monster => (<Card key={monster.id} monster={monster} />))}\n    </div>)\n\n}\n\nexport default CardList; ","import React from 'react';\nimport './search-box.style.css'\n\nconst SearchField  = ({placeholder, handleChange}) =>{\n\n    return(\n    <div>\n       <input \n       className='search' \n       type='search'\n       placeholder={placeholder} \n       onChange={handleChange}/>\n\n   </div>) \n}\n\nexport default SearchField;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component'\nimport SearchField from './components/search-box/search-box.component'\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e =>{\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())) \n\n    return (\n    <div className=\"App\">\n      <h1>MONSTERS ROLODEX</h1>\n      \n      <SearchField placeholder='search monsters' handleChange= {this.handleChange} />\n      <CardList monsters={filteredMonsters} />\n       \n    </div>\n  );\n}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}